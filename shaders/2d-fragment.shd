precision mediump float;
uniform sampler2D u_image;
//uniform vec2 u_sigmas;
//uniform vec3 u_data;
//uniform vec2 u_textureSize;
uniform float u_zmax;
uniform float u_step;
uniform float u_cmargin;
varying vec2 v_texCoord;
const vec3 colorcon=vec3(0.23,0.49,0.77);

vec4 colorScale(float d){
    vec4 col;
    for(int i=0;i<3;i++){
        float dif=abs(d-colorcon[i]);
        if(dif<0.13){col[i]=1.0;}else
        if(dif<0.37){col[i]=(0.37-dif)/0.24;}else
        {col[i]=0.0;}
    }
    col.w=1.0;
    return col;
    /*
    float sigma=1000.0/255.0;
    float hei = 380.0/255.0;
    return vec4(
        min(max(hei-abs(d-0.23)*sigma,0.0),1.0),
        min(max(hei-abs(d-0.49)*sigma,0.0),1.0),
        min(max(hei-abs(d-0.77)*sigma,0.0),1.0),
        1
    );*/
}
float unpack(vec4 rgba){
    float d = rgba.a;
    d=256.0*d+rgba.b;
    d=256.0*d+rgba.g;
    d=256.0*d+rgba.r;
    return d;
}
vec4 pack(float d){
    vec4 rgba=vec4(0.0,0.0,0.0,0.0);
    rgba.r=mod(d,1.0);
    d=(d-rgba.r)/256.0;
    rgba.g=mod(d,1.0);
    d=(d-rgba.g)/256.0;
    rgba.b=mod(d,1.0);
    d=(d-rgba.b)/256.0;
    rgba.a=d;
    return rgba;
}
int compare(vec4 v1,vec4 v2){
    float d=0.0;
    const float margin=1.0/256.0;
    if(v1.w<v2.w-margin){return 1;}
    if(v1.w>v2.w+margin){return -1;}
    if(v1.w!=v2.w){d=256.0*(v1.w-v2.w);}
    if(d+v1.z<v2.z-margin){return 1;}
    if(d+v1.z>v2.z+margin){return -1;}
    if(v1.z!=v2.z){d=256.0*(v1.z-v2.z);}
    if(d+v1.y<v2.y-margin){return 1;}
    if(d+v1.y>v2.y+margin){return -1;}
    if(v1.y!=v2.y){d=256.0*(v1.y-v2.y);}
    if(d+v1.x<v2.x-margin){return 1;}
    if(d+v1.x>v2.x+margin){return -1;}
    return 0;
}
bool contour(float center){
    if(center<u_step/2.0){
        return false;
    }
    float unstep=u_step/2.0;
    for (int i=0;i<20;i++){
        if(unstep>center){break;}
        unstep+=u_step;
    }
    unstep-=u_step/2.0;
    vec4 nstep=pack(unstep);
    vec4 up = texture2D(u_image,v_texCoord+vec2(0,-u_cmargin));
    vec4 down = texture2D(u_image,v_texCoord+vec2(0,u_cmargin));
    vec4 left = texture2D(u_image,v_texCoord+vec2(-u_cmargin,0));
    vec4 right = texture2D(u_image,v_texCoord+vec2(u_cmargin,0));
    if(compare(up,nstep)*compare(down,nstep)<0||compare(left,nstep)*compare(right,nstep)<0){
        //float uup=unpack(up);
        //float udown=unpack(down);
        //float uleft=unpack(left);
        //float uright=unpack(right);
        vec2 ratio = vec2(unpack(up)-unpack(down),unpack(left)-unpack(right));
        ratio=abs((center-unstep)/ratio);
        float len=2.0*ratio.x*ratio.y/length(ratio);
        float alpha = clamp(2.0-2.0*len,0.0,1.0);
        gl_FragColor=mix(gl_FragColor,vec4(0.0,0.0,0.0,1.0),alpha);
        //gl_FragColor=vec4(clamp(len/0.1,0.0,1.0),0.0,0.0,1.0);
        //gl_FragColor=vec4(0.0,0.0,0.0,alpha);
        return true;
    }
    return false;
}
void main() {
    //vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;
    vec4 center=texture2D(u_image,v_texCoord);
    float d=unpack(center);
    //gl_FragColor=vec4(pack(d).xyz,1.0);
    //d=unpack(pack(d));
    vec4 outVec;
    gl_FragColor=colorScale(d/u_zmax);
    contour(d);
    //gl_FragColor = texture2D(u_image,v_texCoord);
    //outVec = vec4(1.0,0.0,0.0,1.0);
    //gl_FragColor = outVec;
}
